from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping

import matplotlib.pyplot as plt
import numpy as np
import os
import tensorflow as tf

#seed값 설정
seed = 0
np.random.seed(seed)
tf.random.set_seed(seed)

#MNIST 데이터 불러오기
(X_train, Y_train), (X_test, Y_test) = mnist.load_data()    #mnist의 손글씨 데이터 가져옴(load_data())

X_train = X_train.reshape(X_train.shape[0], 784).astype('float32') / 255    #2차원 배열을 1차원 배열로 바꾸고(히든레이어네 넘기기 위해)
X_test = X_test.reshape(X_test.shape[0], 784).astype('float32') / 255    #0~255까지의 정수를 0~1사이의 실수로 만들어줌

Y_train = tf.keras.utils.to_categorical(Y_train, 10)    #원-핫 인코딩
Y_test = tf.keras.utils.to_categorical(Y_test, 10)    #(1,2,3,4,5) -> [00001],[00010],[00100],[01000],[10000]식으로...

#모델 프레임 설정
model = Sequential()
model.add(Dense(512, input_dim = 784, activation = 'relu'))
model.add(Dense(10, activation='softmax'))   #다중분류 softmax

#모델 실행 환경 설정
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

#모델 최적화 설정
MODEL_DIR = './model/'
if not os.path.exists(MODEL_DIR):    #잘 만들어진 모델 저장하는 디렉토리
    os.mkdir(MODEL_DIR)

modelpath = "./model/{epoch:02d}-{val_loss:.4f}.hdf5"
checkpointer = ModelCheckpoint(filepath=modelpath, monitor='val_loss', verbose=1, save_best_only=True)
early_stopping_callback = EarlyStopping(monitor='val_loss', patience=10)

#모델의 실행
history = model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=30,
                   batch_size=200, verbose=0, callbacks=[early_stopping_callback, checkpointer])

#테스트 정확도 출력
print("\n Test Accuracy : %.4f" % (model.evaluate(X_test, Y_test) [1]))

#테스트셋의 오차
y_vloss = history.history['val_loss']

#학습셋의 오차
y_loss = history.history['loss']

#그래프로 표현
x_len = np.arange(len(y_loss))
plt.plot(x_len, y_vloss, marker='.', c='red', label='Testset_loss')
plt.plot(x_len, y_loss, marker='.', c='blue', label='Trainset_loss')

#그래프에 그리드를 주고 레이블을 표시
plt.legend(loc='upper right')
#plt.axis([0, 20, 0, 0.35])
plt.grid()
plt.xlabel('epoch')
plt.ylabel('loss')
plt.show()