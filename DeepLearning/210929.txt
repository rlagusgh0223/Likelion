array는 numpy에 있는 배열로 improt numpy를 한 다음에 쓸 수 있다
리스트보다 시간과 용량이 적으며
동일한 자료형(int같은거)로 작성해야 된다

리스트는 2를 곱하면 자료가 2배로 증가하지만
array는 각 요소에 2를 곱한 값이 나온다
이것을 벡터화 연산이라고 하며
이는 비교 연산과 논리 연산을 포함한 모든
수학 연산에 적용된다

array는 리스트와 달리 2차원 배열일때
[2차원 요소, 1차원 요소]로 본다
2차원 : [행,열]
3차원 : [깊이,행,열]

numpy array에서는
ndim은 몇차원인지
shape는 배열의 길이를 나타낸다(배열의 길이는 같아야 된다)

array에서 -1은 마지막 수를 의미한다


정수 배열 인덱싱에서는 인덱스 배열의 원소 각각이 원래 ndarray 객체 원소 하나를 가리키는 인덱스 정수이어야 한다
예를 들어 1차원 배열에서 홀수번째 원소만 골라내는 것은 다음과 같다
a = np.array([11,22,33,44,55,66,77,88,99])
idx = np.array([0,2,4,6,8])
a[idx]
    -> array([11, 33, 55, 77, 99])
이때는 배열 인덱스의 크기가 원래의 배열 크기와 달라도 상관없다. 같은 원소를 반복해서 가리키는 경우에는 배열 인덱스가 원래의 배열보다 더 커지기도 한다

inf는 무한대를 의미하며
nan은 0으로 나눠서 계산이 불가하다는 뜻이다





크기가 정해져 있고 모든 값이 0인 배열을 생성하려면
zeros를 사용한다
인수로는 배열의 크기를 뜻하는 정수를 넣는다
크기를 뜻하는 튜플을 입력하면 다차원 배열도 만들 수 있다


크기를 튜플로 명시하지 않고 다른 배열과 같은 크기의 배열을 생성하고 싶다면 ones_like나 zeros_like를 쓰면 된다


배열을 초기화하여 작성하는데도 시간이 걸린다
아무 값이나 상관없이 일단 배열을 만들고 싶다면
empty 사용

2차원 배열의 전치연산은 행과 열을 바꾸는 작업이다
이는 배열의 T속성으로 구할 수 잇다
메서드가 아닌 속성이라는 점에 유의할것




다차원 배열을 1차원 배열로 만드는 메서드
flatte
ravle